CRegression<-
lm(WS_per_48~No_Shoes_Inches+
Wingspan_Inches+
Sprint,
data=C_Data_Complete)
C_Data_Complete$Results<-fitted(CRegression)
C_Data_Complete$Residuals<-resid(CRegression)
CResults<-ggplot(C_Data_Complete,aes(x=Results,y=Residuals,color=Draft_Yr,size=Pk,label=Player))+
geom_point(alpha=4/10,shape=1)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(C) Projected Performance vs Actual Performance (WSPer48)")+
#geom_smooth()+
theme(axis.title = element_text())+
scale_color_gradient(low="#002B5C",high="#E31937")+
geom_hline(yintercept = 0,color="#E31937")+
facet_grid(Draft_Yr~.)+
geom_vline(xintercept = .1034,color="#002B5C")
CResultsPlot<-plotly_build(CResults)
CResultsPlot
summary(CRegression)
CRegression<-
lm(WS_per_48~No_Shoes_Inches+
Wingspan_Inches+
Sprint,
data=C_Data_Complete)
C_Data_Complete$Results<-fitted(CRegression)
C_Data_Complete$Residuals<-resid(CRegression)
CResults<-ggplot(C_Data_Complete,aes(x=Results,y=Residuals,color=Draft_Yr,size=Pk,label=Player))+
geom_point(alpha=4/10,shape=1)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(C) Projected Performance vs Actual Performance (WSPer48)")+
#geom_smooth()+
theme(axis.title = element_text())+
scale_color_gradient(low="#002B5C",high="#E31937")+
geom_hline(yintercept = 0,color="#E31937")+
facet_wrap(Draft_Yr~.)+
geom_vline(xintercept = .1034,color="#002B5C")
CResultsPlot<-plotly_build(CResults)
CResultsPlot
summary(CRegression)
CRegression<-
lm(WS_per_48~No_Shoes_Inches+
Wingspan_Inches+
Sprint,
data=C_Data_Complete)
C_Data_Complete$Results<-fitted(CRegression)
C_Data_Complete$Residuals<-resid(CRegression)
CResults<-ggplot(C_Data_Complete,aes(x=Results,y=Residuals,color=Draft_Yr,size=Pk,label=Player))+
geom_point(alpha=4/10,shape=1)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(C) Projected Performance vs Actual Performance (WSPer48)")+
#geom_smooth()+
theme(axis.title = element_text())+
scale_color_gradient(low="#002B5C",high="#E31937")+
geom_hline(yintercept = 0,color="#E31937")+
facet_wrap(~Draft_Yr)+
geom_vline(xintercept = .1034,color="#002B5C")
CResultsPlot<-plotly_build(CResults)
CResultsPlot
summary(CRegression)
CRegression<-
lm(WS_per_48~No_Shoes_Inches+
Wingspan_Inches+
Sprint,
data=C_Data_Complete)
C_Data_Complete$Results<-fitted(CRegression)
C_Data_Complete$Residuals<-resid(CRegression)
CResults<-ggplot(C_Data_Complete,aes(x=Results,y=Residuals,size=Pk,label=Player))+
geom_point(alpha=4/10,shape=1)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(C) Projected Performance vs Actual Performance (WSPer48)")+
#geom_smooth()+
theme(axis.title = element_text())+
scale_color_gradient(low="#002B5C",high="#E31937")+
geom_hline(yintercept = 0,color="#E31937")+
facet_wrap(~Draft_Yr)+
geom_vline(xintercept = .1034,color="#002B5C")
CResultsPlot<-plotly_build(CResults)
CResultsPlot
summary(CRegression)
summary(PFRegression)
PFRegression<-
lm(WS_per_48~Weight+
Wingspan_Inches+
Max_Inches,
data=PF_Data_Complete)
PF_Data_Complete$Results<-fitted(PFRegression)
PF_Data_Complete$Residuals<-resid(PFRegression)
PFResults<-ggplot(PF_Data_Complete,aes(x=Results,y=Residuals,size=Pk,label=Player))+
geom_point(alpha=4/10,shape=1)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PF) Projected Performance vs Actual Performance (WSPer48)")+
#geom_smooth()+
theme(axis.title = element_text())+
scale_color_gradient(low="#002B5C",high="#E31937")+
geom_hline(yintercept = 0,color="#E31937")+
facet_wrap(~Draft_Yr)+
geom_vline(xintercept = .1034,color="#002B5C")
PFResultsPlot<-plotly_build(PFResults)
PFResultsPlot
summary(PFRegression)
median(PF_Data_Complete$Results)
PFRegression<-
lm(WS_per_48~Weight+
Wingspan_Inches+
Max_Inches,
data=PF_Data_Complete)
PF_Data_Complete$Results<-fitted(PFRegression)
PF_Data_Complete$Residuals<-resid(PFRegression)
PFResults<-ggplot(PF_Data_Complete,aes(x=Results,y=Residuals,size=Pk,label=Player))+
geom_point(alpha=4/10,shape=1)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PF) Projected Performance vs Actual Performance (WSPer48)")+
#geom_smooth()+
theme(axis.title = element_text())+
scale_color_gradient(low="#002B5C",high="#E31937")+
geom_hline(yintercept = 0,color="#E31937")+
facet_wrap(~Draft_Yr)+
geom_vline(xintercept = .0740,color="#002B5C")
PFResultsPlot<-plotly_build(PFResults)
PFResultsPlot
summary(PFRegression)
mean(PG_Data$WS_per_48)
mean(SG_Data$WS_per_48)
table(draft_and_metric_pos_data_1966_to_2017$WS~draft_and_metric_pos_data_1966_to_2017$Pos)
table(draft_and_metric_pos_data_1966_to_2017$WS,draft_and_metric_pos_data_1966_to_2017$Pos)
hist(Pos,WS)
hist(Pos,WS,draft_and_metric_pos_data_1966_to_2017)
aggregate(WS~Pos,mean())
aggregate(draft_and_metric_pos_data_1966_to_2017,WS~Pos,mean)
aggregate(WS~Pos,data=draft_and_metric_pos_data_1966_to_2017,FUN = mean)
aggregate(WS~Pos,data=draft_and_metric_pos_data_1966_to_2017,FUN = cimean)
aggregate(WS~Pos,data=draft_and_metric_pos_data_1966_to_2017,FUN = ciMean)
draft_and_metric_pos_data_1966_to_2017$Pos<-sub("C","C-PF",draft_and_metric_pos_data_1966_to_2017$Pos)
aggregate(WS~Pos,data=draft_and_metric_pos_data_1966_to_2017,FUN = ciMean)
aggregate(WS~Pos,data=draft_and_metric_pos_data_1966_to_2017,FUN = mean)
draft_and_metric_pos_data_1966_to_2017$Pos<-gsub("C-PF-PF","C",draft_and_metric_pos_data_1966_to_2017$Pos)
aggregate(WS~Pos,data=draft_and_metric_pos_data_1966_to_2017,FUN = mean)
draft_and_metric_pos_data_1966_to_2017$Pos<-revalue(draft_and_metric_pos_data_1966_to_2017$Pos,c("C-PF"="C"))
aggregate(WS~Pos,data=draft_and_metric_pos_data_1966_to_2017,FUN = mean)
draft_and_metric_pos_data_1966_to_2017$Pos<-revalue(draft_and_metric_pos_data_1966_to_2017$Pos,c("F-C-PF"="PF"))
draft_and_metric_pos_data_1966_to_2017$Pos<-revalue(draft_and_metric_pos_data_1966_to_2017$Pos,c("PF-C-PF"="PF"))
draft_and_metric_pos_data_1966_to_2017$Pos<-revalue(draft_and_metric_pos_data_1966_to_2017$Pos,c("PF-SF"="PF"))
draft_and_metric_pos_data_1966_to_2017$Pos<-revalue(draft_and_metric_pos_data_1966_to_2017$Pos,c("SF-PF"="SF"))
draft_and_metric_pos_data_1966_to_2017$Pos<-revalue(draft_and_metric_pos_data_1966_to_2017$Pos,c("SF-SG"="SF"))
draft_and_metric_pos_data_1966_to_2017$Pos<-revalue(draft_and_metric_pos_data_1966_to_2017$Pos,c("SG-PG"="SG"))
draft_and_metric_pos_data_1966_to_2017$Pos<-revalue(draft_and_metric_pos_data_1966_to_2017$Pos,c("SG-SF"="SG"))
aggregate(WS~Pos,data=draft_and_metric_pos_data_1966_to_2017,FUN = mean)
draft_and_metric_pos_data_1966_to_2017$Pos<-revalue(draft_and_metric_pos_data_1966_to_2017$Pos,c("G"="SG"))
draft_and_metric_pos_data_1966_to_2017$Pos<-revalue(draft_and_metric_pos_data_1966_to_2017$Pos,c("F"="SF"))
aggregate(WS~Pos,data=draft_and_metric_pos_data_1966_to_2017,FUN = mean)
boxplot(WS,POS,data=draft_and_metric_pos_data_1966_to_2017)
rm(PFRegression)
rm(PFResults)
rm(PFResultsPlot)
rm(PGMetricRegression)
rm(PGRegression)
rm(PGResults)
rm(PGResultsPlot)
rm(SFRegression)
rm(SFResults)
rm(SFResultsPlot)
rm(SGRegression)
rm(SGResults)
rm(SGResultsPlot)
rm(WSbyPkLottery)
rm(WSbyPkLotteryPlot)
rm(TeamPerformancebyLotterPickPlot)
rm(TeamPerformancebyLotteryPick)
rm(WSPredictedbyPkLotteryPOLY)
rm(WSPredictedbyPkPlotLotteryPOLY)
rm(WSPredictedbyPkPlotTop60POLY)
rm(WSPredictedbyPkTop60POLY)
rm(CRegression)
rm(CResults)
rm(CResultsPlot)
rm(q)
View(byteam)
rm(clean_draft_and_metric_pos_data_1966_to_2017_PG)
rm(draft_and_metric_pos_data_1987_to_2017_CompleteData)
rm(predicted.intervals)
View(PG_Data)
View(PG_Data_Complete)
library(readr)
X2017PGMetrics <- read_csv("~/2017PGMetrics.csv")
View(X2017PGMetrics)
View(X2017PGMetrics)
View(X2017PGMetrics)
rm(X201)X2017PGMetrics
rm(X2017PGMetrics)
library(readr)
X2017PGMetrics <- read_csv("~/2017PGMetrics.csv")
View(X2017PGMetrics)
PGResults<-ggplot(X2017PGMetrics,aes(x=Results,y=Residuals,label=Player))+
geom_point(color="#666666",alpha=4/10)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PG) Projected Performance vs Actual Performance (WSPer48)")+
theme_fivethirtyeight()+
scale_color_fivethirtyeight()+
#geom_smooth()+
theme(axis.title = element_text())+
geom_hline(yintercept = 0,color="blue")+
geom_vline(xintercept = 0,color="blue")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
PGRegression<-
lm(WS_per_48~No_Shoes_Inches+
Wingspan_Inches+
Standing_Reach_Inches+
Max_Inches+
No_Step_Inches+
Weight+
Body_Fat+
Bench+
Agility+
Sprint,
data=X2017PGMetrics)
X2017PGMetrics$Results<-fitted(PGRegression)
X2017PGMetrics$Residuals<-resid(PGRegression)
PGResults<-ggplot(X2017PGMetrics,aes(x=Results,y=Residuals,label=Player))+
geom_point(color="#666666",alpha=4/10)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PG) Projected Performance vs Actual Performance (WSPer48)")+
theme_fivethirtyeight()+
scale_color_fivethirtyeight()+
#geom_smooth()+
theme(axis.title = element_text())+
geom_hline(yintercept = 0,color="blue")+
geom_vline(xintercept = 0,color="blue")
PGResultsPlot<-plotly_build(PGResults)
PGResultsPlot
library("ggthemes", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("plotly", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
PGRegression<-
lm(WS_per_48~No_Shoes_Inches+
Wingspan_Inches+
Standing_Reach_Inches+
Max_Inches+
No_Step_Inches+
Weight+
Body_Fat+
Bench+
Agility+
Sprint,
data=X2017PGMetrics)
X2017PGMetrics$Results<-fitted(PGRegression)
X2017PGMetrics$Residuals<-resid(PGRegression)
PGResults<-ggplot(X2017PGMetrics,aes(x=Results,y=Residuals,label=Player))+
geom_point(color="#666666",alpha=4/10)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PG) Projected Performance vs Actual Performance (WSPer48)")+
theme_fivethirtyeight()+
scale_color_fivethirtyeight()+
#geom_smooth()+
theme(axis.title = element_text())+
geom_hline(yintercept = 0,color="blue")+
geom_vline(xintercept = 0,color="blue")
PGResultsPlot<-plotly_build(PGResults)
View(X2017PGMetrics)
PGRegression<-
lm(WS_per_48~No_Shoes_Inches+
Wingspan_Inches+
Standing_Reach_Inches+
Max_Inches+
No_Step_Inches+
Weight+
Body_Fat+
Bench+
Agility+
Sprint,
data=X2017PGMetrics)
View(PG_Data_Complete)
PGRegression<-
lm(WS_per_48~No_Shoes_Inches+
Wingspan_Inches+
Standing_Reach_Inches+
Max_Inches+
Max_Reach_Inches+
No_Step_Inches+
No_Step_Reach_Inches+
Weight+
Body_Fat+
Bench+
Agility+
Sprint,
data=PG_Data_Complete)
PGRegression<-
lm(WS_per_48~No_Shoes_Inches+
Wingspan_Inches+
Standing_Reach_Inches+
Max_Inches+
Max_Reach_Inches+
No_Step_Inches+
No_Step_Reach_Inches+
Weight+
Body_Fat+
Bench+
Agility+
Sprint,
data=PG_Data_Complete)
PG_Data_Complete$Results<-fitted(PGRegression)
PG_Data_Complete$Residuals<-resid(PGRegression)
PGResults<-ggplot(PG_Data_Complete,aes(x=Results,y=Residuals,label=Player))+
geom_point(color="#666666",alpha=4/10)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PG) Projected Performance vs Actual Performance (WSPer48)")+
theme_fivethirtyeight()+
scale_color_fivethirtyeight()+
#geom_smooth()+
theme(axis.title = element_text())+
geom_hline(yintercept = 0,color="blue")+
geom_vline(xintercept = 0,color="blue")
PGResultsPlot<-plotly_build(PGResults)
PGResultsPlot
cbind(
newdata,
WS_per_48 = predict(PG Regression Model, newdata = X2017PGMetrics)
)
cbind(
newdata,
WS_per_48 = predict(PG Regression Model, newdata = X2017PGMetrics)
)
cbind(
newdata,
WS_per_48 = predict(PGRegression, newdata = X2017PGMetrics)
)
newdata=X2017PGMetrics
cbind(
newdata,
WS_per_48 = predict(PGRegression, newdata = X2017PGMetrics)
)
newdata=X2017PGMetrics
cbind(
newdata,
WS_per_48 = predict(PGRegression, newdata = X2017PGMetrics)
)
newdata=X2017PGMetrics
cbind(
newdata,
WS_per_48 = predict(PGRegression, newdata = X2017PGMetrics)
)
predict(PGRegression,newdata=X2017PGMetrics)
View(X2017PGMetrics)
X2017PGMetrics$Max_Inches<-as.numeric(X2017PGMetrics$Max_Inches)
X2017PGMetrics$No_Step_Inches<-as.numeric(X2017PGMetrics$No_Step_Inches)
X2017PGMetrics$Agility<-as.numeric(X2017PGMetrics$Agility)
X2017PGMetrics$Weight<-as.numeric(X2017PGMetrics$Weight)
X2017PGMetrics$Sprint<-as.numeric(X2017PGMetrics$Sprint)
X2017PGMetrics$Body_Fat<-as.numeric(X2017PGMetrics$Body_Fat)
PGRegression<-
lm(WS_per_48~No_Shoes_Inches+
Wingspan_Inches+
Standing_Reach_Inches+
Max_Inches+
No_Step_Inches+
Weight+
Body_Fat+
Agility+
Sprint,
data=PG_Data_Complete)
PG_Data_Complete$Results<-fitted(PGRegression)
PG_Data_Complete$Residuals<-resid(PGRegression)
PGResults<-ggplot(PG_Data_Complete,aes(x=Results,y=Residuals,label=Player))+
geom_point(color="#666666",alpha=4/10)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PG) Projected Performance vs Actual Performance (WSPer48)")+
theme_fivethirtyeight()+
scale_color_fivethirtyeight()+
#geom_smooth()+
theme(axis.title = element_text())+
geom_hline(yintercept = 0,color="blue")+
geom_vline(xintercept = 0,color="blue")
PGResultsPlot<-plotly_build(PGResults)
PGResultsPlot
predict(PGRegression,newdata=X2017PGMetrics)
X2017PGMetrics$Results<-predict(PGRegression,newdata=X2017PGMetrics)
View(X2017PGMetrics)
X2017PGMetrics$Residuals<-0
View(X2017PGMetrics)
PG2017Results<-ggplot(X2017PGMetrics,aes(x=Results,y=Residuals,label=Player))+
geom_point(color="#666666",alpha=4/10)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PG) Projected Performance vs Actual Performance (WSPer48)")+
theme_fivethirtyeight()+
scale_color_fivethirtyeight()+
#geom_smooth()+
theme(axis.title = element_text())+
geom_hline(yintercept = 0,color="blue")+
geom_vline(xintercept = 0,color="blue")
PG2017ResultsPlot<-plotly_build(PG2017Results)
PG2017ResultsPlot
View(X2017PGMetrics)
PG2017Results<-ggplot(X2017PGMetrics,aes(x=Results,y=Residuals,label=PLAYER))+
geom_point(color="#666666",alpha=4/10)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PG) Projected Performance vs Actual Performance (WSPer48)")+
theme_fivethirtyeight()+
scale_color_fivethirtyeight()+
#geom_smooth()+
theme(axis.title = element_text())+
geom_hline(yintercept = 0,color="blue")+
geom_vline(xintercept = 0,color="blue")
PG2017ResultsPlot<-plotly_build(PG2017Results)
PG2017ResultsPlot
PG2017Results<-ggplot(X2017PGMetrics,aes(x=Results,y=Residuals,label=PLAYER))+
geom_point(color="#666666",alpha=4/10)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PG) Projected Performance vs Actual Performance (WSPer48)")+
theme_fivethirtyeight()+
scale_color_fivethirtyeight()+
#geom_smooth()+
theme(axis.title = element_text())+
geom_vline(xintercept = 0,color="blue")
PG2017ResultsPlot<-plotly_build(PG2017Results)
PG2017ResultsPlot
library(readr)
draft_and_metric_pos_data_1966_to_2016 <- read_csv("~/R/Projects/NBA Draft/Updated MYSQL CSVs/draft_and_metric_pos_data_1966_to_2016.csv")
View(draft_and_metric_pos_data_1966_to_2016)
PGCorrect_Data<-draft_and_metric_pos_data_1966_to_2016[draft_and_metric_pos_data_1966_to_2016$Pos=PG,]
PGCorrect_Data<-draft_and_metric_pos_data_1966_to_2016[draft_and_metric_pos_data_1966_to_2016$Pos==PG,]
PGCorrect_Data<-draft_and_metric_pos_data_1966_to_2016[draft_and_metric_pos_data_1966_to_2016$Pos=='PG',]
View(PGCorrect_Data)
PGCorrect_Data_Complete<-complete.cases(PGCorrect_Data,)
PGCorrect_Data_Complete<-PGCorrect_Data[complete.cases(PGCorrect_Data)]
PGCorrect_Data_Complete<-complete.cases(PGCorrect_Data)
rm(PGCorrect_Data_Complete)
PGCorrect_Data_Complete<-PGCorrect_Data[complete.cases(PGCorrect_Data),]
View(PGCorrect_Data_Complete)
rm(PGCorrect_Data_Complete)
##To filter out NULLS values###
PGCorrect_Data_Complete<-
PGCorrect_Data[complete.cases(PGCorrect_Data),]
View(PGCorrect_Data_Complete)
rm(PGCorrect_Data)
rm(PGCorrect_Data_Complete)
rm(draft_and_metric_pos_data_1966_to_2016)
View(PG_Data_Complete)
PG_Data_Complete$Max_Inches<-PG_D
PG_Data_Complete$Max_Inches<-substr(PG_Data_Complete$Max,1,2)
View(PG_Data_Complete)
PG_Data_Complete$No_Step_Inches<-substr(PG_Data_Complete$No_Step,1,2)
View(PG_Data_Complete)
PGRegression<-
lm(WS_per_48~No_Shoes_Inches+
Wingspan_Inches+
Standing_Reach_Inches+
Max_Inches+
No_Step_Inches+
Weight+
Body_Fat+
Agility+
Sprint,
data=PG_Data_Complete)
PG_Data_Complete$Results<-fitted(PGRegression)
PG_Data_Complete$Residuals<-resid(PGRegression)
PGResults<-ggplot(PG_Data_Complete,aes(x=Results,y=Residuals,label=Player))+
geom_point(color="#666666",alpha=4/10)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PG) Projected Performance vs Actual Performance (WSPer48)")+
theme_fivethirtyeight()+
scale_color_fivethirtyeight()+
#geom_smooth()+
theme(axis.title = element_text())+
geom_hline(yintercept = 0,color="blue")+
geom_vline(xintercept = 0,color="blue")
PGResultsPlot<-plotly_build(PGResults)
PGResultsPlot
X2017PGMetrics$Results<-predict(PGRegression,newdata=X2017PGMetrics)
PG_Data_Complete$Max_Inches<-as.numeric(PG_Data_Complete$Max_Inches)
PG_Data_Complete$No_Step_Inches<-as.numeric(PG_Data_Complete$No_Step_Inches)
View(PG_Data_Complete)
PGRegression<-
lm(WS_per_48~No_Shoes_Inches+
Wingspan_Inches+
Standing_Reach_Inches+
Max_Inches+
No_Step_Inches+
Weight+
Body_Fat+
Agility+
Sprint,
data=PG_Data_Complete)
PG_Data_Complete$Results<-fitted(PGRegression)
PG_Data_Complete$Residuals<-resid(PGRegression)
PGResults<-ggplot(PG_Data_Complete,aes(x=Results,y=Residuals,label=Player))+
geom_point(color="#666666",alpha=4/10)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PG) Projected Performance vs Actual Performance (WSPer48)")+
theme_fivethirtyeight()+
scale_color_fivethirtyeight()+
#geom_smooth()+
theme(axis.title = element_text())+
geom_hline(yintercept = 0,color="blue")+
geom_vline(xintercept = 0,color="blue")
PGResultsPlot<-plotly_build(PGResults)
PGResultsPlot
X2017PGMetrics$Results<-predict(PGRegression,newdata=X2017PGMetrics)
PG2017Results<-ggplot(X2017PGMetrics,aes(x=Results,y=Residuals,label=PLAYER))+
geom_point(color="#666666",alpha=4/10)+
labs(x="Projected Performance",y="Above or Below Projected Performance")+
ggtitle("(PG) Projected Performance vs Actual Performance (WSPer48)")+
theme_fivethirtyeight()+
scale_color_fivethirtyeight()+
#geom_smooth()+
theme(axis.title = element_text())+
geom_vline(xintercept = 0,color="blue")
PG2017ResultsPlot<-plotly_build(PG2017Results)
PG2017ResultsPlot
X2017PGMetrics$Results<-fitted(PGRegression,newdata=X2017PGMetrics)
test <- read.csv("~/MLproject/data/test.csv")
View(test)
View(test)
setwd("~/MLproject/src")
